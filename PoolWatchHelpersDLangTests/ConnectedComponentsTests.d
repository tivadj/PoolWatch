module ConnectedComponentsTests;

import std.stdio;
import std.string;
import PoolWatchHelpersDLang.MatrixUndirectedGraph2;
import PoolWatchHelpersDLang.connect;
import PoolWatchHelpersDLang.PoolWatchInteropDLang;
import PoolWatchHelpersDLang.GraphHelpers;

private struct ClientStructure
{
	ConnectedComponentsNodeData connComp;
	//alias dfs this;
	//ConnectedComponentsVertexData ccData;
	//alias ccData this;
}

void test1()
{
	//testCCCount();
	connectedComponentsCountTest();
	//test3();
}

void testCCCount()
{
	int fff = int.sizeof;
	auto edgeList = [1, 2, 1, 3, 1, 4];
	DebugFun debugFun = function void(const(char)* msg) { printf(msg); return; };
	//simplePrintf("abc"c.ptr);
	int ccCount = computeConnectedComponentsCount(edgeList.ptr, cast(int)edgeList.length, debugFun);
	writeln(ccCount);
}
void connectedComponentsCountTest()
{
	alias MatrixUndirectedGraph2!EmptyPayload GraphT;
	auto g = GraphT(6);
	g.setEdge(1,0);
	g.setEdge(2,0);
	g.setEdge(0,3);
	g.setEdge(3,2);
	g.setEdge(4,5);

	scope auto nodePayload = new ClientStructure[g.nodesCount];
	//auto nodePayloadFun = (ref GraphT g, int v) => &nodePayload[v].dfs;
	scope auto nodePayloadFun = delegate ConnectedComponentsNodeData*(ref GraphT g, int v) { 
		return &nodePayload[v].connComp; 
	};
	int cc = connectedComponentsCount!(GraphT,nodePayloadFun)(g);
	writeln(cc);
	assert(cc == 2);
}
void test3()
{
	int[] edgeList = [
//3, 3, 5, 4, 4,
//5, 7, 6, 6, 8];
	59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,85,85,85,85,85,85,85,85,85,85,85,85,85,85,70,70,70,70,70,70,70,70,70,70,70,70,70,70,86,86,86,86,86,86,86,86,86,86,86,86,71,71,71,71,71,71,71,71,71,71,71,87,87,87,87,87,87,87,87,87,87,72,72,72,72,72,72,72,72,72,72,88,88,88,88,88,88,88,88,73,73,73,73,73,73,73,73,89,89,89,89,89,89,74,74,74,74,74,74,90,90,90,90,91,91,91,92,92,93,
	75,60,76,61,77,62,78,63,79,64,80,65,81,66,82,67,83,68,84,69,85,70,86,71,87,72,88,73,89,74,90,95,60,76,61,77,62,78,63,79,64,80,65,81,66,82,67,83,68,84,69,85,70,86,71,87,72,88,73,89,74,90,91,92,93,94,76,61,77,62,78,63,79,64,80,65,81,66,82,67,83,68,84,69,85,70,86,71,87,72,88,73,89,74,90,91,92,93,94,95,61,77,62,78,63,79,64,80,65,81,66,82,67,83,68,84,69,85,70,86,71,87,72,88,73,89,74,90,91,92,93,94,77,62,78,63,79,64,80,65,81,66,82,67,83,68,84,69,85,70,86,71,87,72,88,73,89,74,90,91,92,93,94,95,62,78,63,79,64,80,65,81,66,82,67,83,68,84,69,85,70,86,71,87,72,88,73,89,74,90,91,92,93,94,78,63,79,64,80,65,81,66,82,67,83,68,84,69,85,70,86,71,87,72,88,73,89,74,90,91,92,93,94,95,63,79,64,80,65,81,66,82,67,83,68,84,69,85,70,86,71,87,72,88,73,89,74,90,91,92,93,94,79,64,80,65,81,66,82,67,83,68,84,69,85,70,86,71,87,72,88,73,89,74,90,92,94,95,64,80,65,81,66,82,67,83,68,84,69,85,70,86,71,87,72,88,73,89,74,90,91,92,93,94,80,65,81,66,82,67,83,68,84,69,85,70,86,71,87,72,88,73,89,74,90,91,92,93,94,95,65,81,66,82,67,83,68,84,69,85,70,86,71,87,72,88,73,89,74,90,91,92,93,94,81,66,82,67,83,68,84,69,85,70,86,71,87,72,88,73,89,74,90,91,92,93,94,95,66,82,67,83,68,84,69,85,70,86,71,87,72,88,73,89,74,90,91,92,93,94,82,67,83,68,84,69,85,70,86,71,87,72,88,73,89,74,90,91,92,93,94,95,67,83,68,84,69,85,70,86,71,87,72,88,73,89,74,90,91,92,93,94,83,68,84,69,85,70,86,71,87,72,88,73,89,74,90,93,94,95,68,84,69,85,70,86,71,87,72,88,73,89,74,90,91,92,93,94,84,69,85,70,86,71,87,72,88,73,89,74,90,91,92,93,94,95,69,85,70,86,71,87,72,88,73,89,74,90,91,92,93,94,85,70,86,71,87,72,88,73,89,74,90,91,92,93,94,95,70,86,71,87,72,88,73,89,74,90,91,92,93,94,86,71,87,72,88,73,89,74,90,91,92,93,94,95,71,87,72,88,73,89,74,90,91,92,93,94,87,72,88,73,89,74,90,92,93,94,95,72,88,73,89,74,90,91,92,93,94,88,73,89,74,90,91,92,93,94,95,73,89,74,90,91,92,93,94,89,74,90,91,92,93,94,95,74,90,91,92,93,94,90,91,92,93,94,95,91,92,93,94,92,93,94,93,94,94];
	//alias MatrixUndirectedGraph2!EmptyPayload GraphT;
	//auto g = GraphT(6);
	//g.setEdge(0,1);
	//g.setEdge(0,2);
	//g.setEdge(2,3);
	//g.setEdge(3,4);
	//g.setEdge(4,5);

	DebugFun debugFun = function void(const(char)* msg) { printf(msg); return; };
	int ccCount = computeConnectedComponentsCount(edgeList.ptr, cast(int)edgeList.length, debugFun);
	writeln(ccCount);
}
